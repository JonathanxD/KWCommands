
buildscript {
    ext.kotlin_version = '1.2.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'me.champeau.gradle.jmh' version '0.4.4'
}

group 'com.github.jonathanxd'
version '1.3'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'license'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8

license {
    header rootProject.file("LICENSE_HEADER")
}


repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.googlecode.json-simple:json-simple:1.1.1"
    compile "com.github.JonathanxD:JwIUtils:4.9.22"
    jmh "org.openjdk.jmh:jmh-core:1.19"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.19"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


jar {
    from "$rootProject.rootDir/LICENSE"

    manifest {
        attributes 'Implementation-Title': baseName,
                'Implementation-Version': version
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

license {
    ext.name = project.name
    ext.description = project.description
    ext.organization = project.organization
    ext.url = project.url
    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    exclude "**/*.json"
    exclude "**/*.info"
    exclude "**/*.md"
    exclude "res/**"
    exclude "src/main/resources/**"
    exclude "src/test/resources/**"
    exclude "**/*.lang"

    header rootProject.file('LICENSE_HEADER')

    sourceSets = project.sourceSets

    ignoreFailures false
    strictCheck true

    mapping {
        java = 'SLASHSTAR_STYLE'
        kt = 'SLASHSTAR_STYLE'
    }
}

